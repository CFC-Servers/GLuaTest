name: GLuaTest Tester



on:
  workflow_call:
    inputs:
      server-cfg:
        type: string
        required: false
        description: "A path (relative to project directory) with extra server config options"
        default: "gluatest_custom.cfg"

      requirements:
        type: string
        required: false
        description: "A path (relative to project directory) with a list of all requirements to test this project"
        default: "gluatest_requirements.txt"

jobs:
  test:
    name: "Run tests"
    runs-on: ubuntu-18.04

    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
        with:
          path: project

      - name: Get Pigz
        run: |
          curl -LO https://zlib.net/pigz/pigz.tar.gz
          tar -xvzf pigz.tar.gz
          cd pigz
          make
          mv pigz ~/pigz

      - name: Set up output files
        run: |
          cd $GITHUB_WORKSPACE
          touch $GITHUB_WORKSPACE/failures.json
          chmod g+w $GITHUB_WORKSPACE/failures.json
          chmod o+w $GITHUB_WORKSPACE/failures.json

          echo "gluatest_github_output 1" >> $GITHUB_WORKSPACE/project/${{ inputs.server-cfg }}
          echo "" >> $GITHUB_WORKSPACE/project/${{ inputs.requirements }}

      - name: Get latest GLuaTest version
        id: latest-tag-getter
        run: |
          cd $GITHUB_WORKSPACE

          git clone --depth 1 https://github.com/CFC-Servers/GLuaTest.git gluatest
          cd ./gluatest
          cp docker/docker-compose.yml $GITHUB_WORKSPACE/docker-compose.yml

          git fetch --quiet --tags
          latest="$(git tag | tail -1)"
          echo "Latest Tag: $latest"
          echo "::set-output name=LATEST_TAG::$latest"

          cd $GITHUB_WORKSPACE

      - name: Cache Docker images.
        id: latest-image
        uses: CFC-Servers/cache@v3.1.0
        with:
          key: gluatest-${{ steps.latest-tag-getter.outputs.LATEST_TAG }}
          path: ~/gluatest-image.tar.gz

      - name: Pull docker image
        if: steps.latest-image.outputs.cache-hit != 'true'
        run: |
          docker-compose pull

      - name: Restore docker image
        if: steps.latest-image.outputs.cache-hit == 'true'
        run: |
          ~/pigz -dc ~/gluatest-image.tar.gz | tar xf - | docker load

      - name: "Run GLuaTest"
        env:
          FAILURE_OUTPUT: "${{ github.workspace }}/failures.json"
          REQUIREMENTS: "${{ github.workspace }}/project/${{ inputs.requirements }}"
          CUSTOM_SERVER_CONFIG: "${{ github.workspace }}/project/${{ inputs.server-cfg }}"
          PROJECT_DIR: "${{ github.workspace }}/project"

        run: |
          echo "Using cached GLuaTest image: ${{ steps.latest-image.outputs.cache-hit }}"
          docker-compose up --no-log-prefix

          exitstatus=$?
          if [ $exitstatus -ne 0 ]; then
            echo "::error ::GLuaTest runner didn't exit successfully! Test results are not available."
            exit $exitstatus
          fi

          if [ -s "$FAILURE_OUTPUT" ]; then
            exit 1
          fi

      - name: Save built image
        if: always() && steps.latest-image.outputs.cache-hit != 'true'
        run: |
          docker save ghcr.io/cfc-servers/gluatest:latest | ~/pigz > ~/gluatest-image.tar.gz
