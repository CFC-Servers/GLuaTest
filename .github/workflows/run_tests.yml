---
name: GLuaTest Tester


on:
  workflow_call:
    inputs:
      server-cfg:
        type: string
        required: false
        description: "A path (relative to project directory) with extra server config options"
        default: "gluatest_custom.cfg"

      requirements:
        type: string
        required: false
        description: "A path (relative to project directory) with a list of all requirements to test this project"
        default: "gluatest_requirements.txt"

      gamemode:
        type: string
        required: false
        description: "The name of the gamemode for the test server to run. (Be sure to list it as a requirement or include it in the test collection, if necessary)"
        default: "sandbox"

      collection:
        type: string
        required: false
        description: "The workshop ID of the collection for the test server to use"

      ssh-private-key:
        type: string
        required: false
        description: "The Private SSH key to use when cloning the dependencies"

      github-token:
        type: string
        required: false
        description: "A GitHub Personal Access Token"

jobs:
  test:
    name: "Run tests"
    runs-on: ubuntu-latest

    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
        with:
          path: project

      - name: Set up output files
        run: |
          cd $GITHUB_WORKSPACE
          touch $GITHUB_WORKSPACE/project/${{ inputs.requirements }}
          echo "gluatest_github_output 1" >> $GITHUB_WORKSPACE/project/${{ inputs.server-cfg }}

      - name: Get latest GLuaTest version
        id: latest-tag-getter
        run: |
          cd $GITHUB_WORKSPACE

          git clone --depth 1 https://github.com/CFC-Servers/GLuaTest.git gluatest
          cd ./gluatest
          cp docker/docker-compose.yml $GITHUB_WORKSPACE/docker-compose.yml

          git fetch --quiet --tags
          latest="$(git describe --tags `git rev-list --tags --max-count=1`)"
          echo "Latest Tag: $latest"
          echo "LATEST_TAG=$latest" >> $GITHUB_OUTPUT

          cd $GITHUB_WORKSPACE

      - name: Pull latest test runner
        run: docker-compose pull

      - name: Prepare the override directory
        run: |
          # The goal is for project_override directory to mirror the base garry's mod repo in terms of file structure
          #
          # Examples:
          #
          # - An addon with the following repo structure:
          #   - lua/
          #   -   autorun/
          #   -     init.lua
          #   -   example/
          #   -     my_addon.lua
          #   - entities/
          #   - sounds/
          #   - README.md
          # Should move its entire repo contents to:
          # - project_override/garrysmod/addons/project/
          #
          #
          # - A gamemode repo that includes non-gamemode files like:
          #   - data_static/
          #     - jazztronauts/
          #   - gamemodes/
          #     - jazztronauts/
          #       - gamemode/
          #         - sv_jazztronauts.lua
          #       - entities/
          #       - jazztronauts.txt
          #   - maps/
          #   - materials/
          #   - models/
          #   - resource/
          #   - sound/
          #   - README.md
          # Should move its entire repo contents to:
          # - project_override/garrysmod/
          #
          #
          # - A gamemode repo that contains only gamemode code, like:
          #   - content/
          #   - entities/
          #   - gamemode/
          #   - darkrp.txt
          #   - icon24.png
          #   - logo.png
          #   - README.md
          # Should move its entire repo contents to:
          # - project_override/garrysmod/gamemodes/darkrp/
          #
          #
          # - A repo that contains garrysmod/ at the top level, like:
          #   - garrysmod/
          #   - README.md
          # Should move its entire repo contents to:
          # - project_override/
          
          cd $GITHUB_WORKSPACE

          if [ -d "garrysmod" ]; then
            dest=""
          elif [ -d "gamemodes" ]; then
            dest="garrysmod/"
          elif [ -d "gamemode" ]; then
            gamemode_file=$(grep --recursive --word-regexp --files-with-matches '"base"')
            echo "Found gamemode definition file: $gamemode_file"

            gamemode_name=$(head --quiet --lines 1 "$gamemode_file" | tr --delete '"')
            echo "Determined gamemode name: $gamemode_name"

            dest="garrysmod/gamemodes/$gamemode_name/"
          elif [ -d "lua" ]; then
            dest="garrysmod/addons/project/"
          else
            echo "::error title=Unknown project structure!::Please report this: https://github.com/CFC-Servers/GLuaTest/issues"
            exit 1
          fi

          full_destination="$GITHUB_WORKSPACE/project_override/$dest"
          echo "Final destination for project repo contents: $full_destination"
          mkdir --verbose --parents "$full_destination"

          cp --recursive --verbose "$GITHUB_WORKSPACE/project/*" "$full_destination/"
            

      - name: Run GLuaTest
        env:
          REQUIREMENTS: "${{ github.workspace }}/project/${{ inputs.requirements }}"
          CUSTOM_SERVER_CONFIG: "${{ github.workspace }}/project/${{ inputs.server-cfg }}"
          PROJECT_DIR: "${{ github.workspace }}/project_override"
          GAMEMODE: "${{ inputs.gamemode }}"
          COLLECTION_ID: "${{ inputs.collection }}"
          SSH_PRIVATE_KEY: "${{ inputs.ssh-private-key }}"
          GITHUB_TOKEN: "${{ inputs.github-token }}"

        run: |
          docker-compose up --no-log-prefix --exit-code-from runner
          exitstatus=$?

          if [ $exitstatus -ne 0 ]; then
            exit $exitstatus
          fi
