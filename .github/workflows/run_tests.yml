name: GLuaTest Tester


on:
  workflow_call:
    inputs:
      server-cfg:
        type: string
        required: false
        description: "A path (relative to project directory) with extra server config options"
        default: "gluatest_custom.cfg"

      requirements:
        type: string
        required: false
        description: "A path (relative to project directory) with a list of all requirements to test this project"
        default: "gluatest_requirements.txt"

jobs:
  test:
    name: "Run tests"
    runs-on: ubuntu-18.04

    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
        with:
          path: project

      - name: "Set up output files"
        run: |
          echo "" > $GITHUB_WORKSPACE/failures.json
          echo "" >> $GITHUB_WORKSPACE/project/${{ inputs.server-cfg }}
          echo "" >> $GITHUB_WORKSPACE/project/${{ inputs.requirements }}
          ls -alh $GITHUB_WORKSPACE
          echo ""
          ls -alh $GITHUB_WORKSPACE/project

      - name: "Run GLuaTest"
        run: |
          docker run \
            --tty \
            --rm \
            --stop-timeout 3 \
            --name gluatest_runner \
            --mount type=bind,source="$GITHUB_WORKSPACE/failures.json",target="/home/steam/gmodserver/garrysmod/data/gluatest_failures.json" \
            --mount type=bind,source="$GITHUB_WORKSPACE/project/${{ inputs.server-cfg }}",target="/home/steam/gmodserver/custom_server.cfg",readonly \
            --mount type=bind,source="$GITHUB_WORKSPACE/project/${{ inputs.requirements }}",target="/home/steam/gmodserver/custom_requirements.txt",readonly \
            --mount type=bind,source="$GITHUB_WORKSPACE/project",target="/home/steam/gmodserver/garrysmod/addons/project",readonly \
            ghcr.io/cfc-servers/gluatest

          docker inspect gluatest_runner

          exitstatus=$?
          if [ $exitstatus -ne 0 ]; then
            echo "::error ::GLuaTest runner didn't exit successfully! Test results are not available."
            exit $exitstatus
          fi

      - name: "Check and report errors"
        run: |
          ls -alh $GITHUB_WORKSPACE
          cat $GITHUB_WORKSPACE/failures.json
          jq -c '.[] | "file=\(.sourceFile),line=\(.lineNumber)::\(.reason)"' $GITHUB_WORKSPACE/failures.json | while read i; do
              echo "$i"
              temp="${i%\"}"
              message="${temp#\"}"
              echo "::error $message"
          done
